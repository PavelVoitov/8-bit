{"version":3,"file":"static/js/590.8e130c77.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs/Dialogs.module.css?7010","components/Dialogs/DialogItem/DialogsItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/MessageItem.module.css?a146","components/Dialogs/Message/MessageItem.tsx","webpack://samurai-way/./src/components/Dialogs/MessageInput/AddMessageForm/AddMessageForm.module.css?1cf0","components/Dialogs/MessageInput/AddMessageForm/AddMessageForm.tsx","components/Dialogs/MessageInput/MessageInput.tsx","components/Dialogs/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__xsgwP\",\"dialogsItems\":\"Dialogs_dialogsItems__cRRxT\",\"dialog\":\"Dialogs_dialog__wIOk+\",\"active\":\"Dialogs_active__mtErk\",\"users\":\"Dialogs_users__37043\",\"messagesAndInput\":\"Dialogs_messagesAndInput__lLU1e\",\"message\":\"Dialogs_message__noMVn\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from 'components/Dialogs/Dialogs/Dialogs.module.css';\r\n\r\n\r\ntype DialogsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogsPropsType) => {\r\n    const {name, id} = props\r\n    let path = '/dialogs/' + id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path} className={name === 'Andrew' ? s.active : ''}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"MessageItem_messageBlock__NPLLw\",\"messageBlockUser\":\"MessageItem_messageBlockUser__tOZwh\",\"messageUser\":\"MessageItem_messageUser__S83vO\",\"messageImg\":\"MessageItem_messageImg__bU4tu\",\"corner\":\"MessageItem_corner__ta+x5\",\"cornerUser\":\"MessageItem_cornerUser__FvFwb\",\"time\":\"MessageItem_time__lGbhw\",\"textMessage\":\"MessageItem_textMessage__xCNya\"};","import React from \"react\";\r\nimport s from './MessageItem.module.css'\r\n\r\ntype MessagePropsType = {\r\n\tmessage: string\r\n\tid: number\r\n\tsender: string\r\n}\r\n\r\nexport const MessageItem = (props: MessagePropsType) => {\r\n\tconst {message, id, sender} = props\r\n\r\n\treturn (\r\n\t\t<div className={sender === 'I' ? s.messageBlock : `${s.messageBlockUser} ${s.messageBlock}`}>\r\n\t\t\t<div className={sender === 'I' ? s.corner : s.cornerUser}></div>\r\n\t\t\t<div key={id} className={sender === 'I' ? s.messageImg : s.messageUser}>\r\n\t\t\t\t<div className={s.textMessage}>{message}</div>\r\n\t\t\t\t<div className={s.time}>10:30</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddMessageForm_form__4ExmI\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"components/common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\nimport s from './AddMessageForm.module.css'\r\n\r\nexport type FormMessageDataType = {\r\n    message: string\r\n}\r\n\r\ninterface AddMessageFormType {\r\n    onSubmit: (values: FormMessageDataType) => void\r\n}\r\n\r\nconst maxLength300 = maxLengthCreator(300)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormMessageDataType, AddMessageFormType> & AddMessageFormType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.form}>\r\n            <Field\r\n                component={Textarea}\r\n                validate={[required, maxLength300]}\r\n                placeholder={'Enter your message...'}\r\n                name={'message'}\r\n            ></Field>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormMessageDataType, AddMessageFormType>({ form: 'dialogAddMessageForm' })(AddMessageForm)","import React from \"react\";\r\nimport {MessagesType} from \"redux/messages-reducer\";\r\nimport {AddMessageReduxForm, FormMessageDataType} from \"components/Dialogs/MessageInput/AddMessageForm/AddMessageForm\";\r\n\r\ntype MessageInputPropsType = {\r\n    state: MessagesType\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\n\r\nexport const MessageInput = (props: MessageInputPropsType) => {\r\n\r\n    const addMessage = (values: FormMessageDataType) => {\r\n        props.addMessage(values.message)\r\n    }\r\n    return (\r\n        <div>\r\n            <AddMessageReduxForm\r\n                onSubmit={addMessage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from 'components/Dialogs/Dialogs/Dialogs.module.css';\r\nimport {DialogItem} from \"components/Dialogs/DialogItem/DialogsItem\";\r\nimport {MessageItem} from \"components/Dialogs/Message/MessageItem\";\r\nimport {MessageInput} from \"components/Dialogs/MessageInput/MessageInput\";\r\nimport {DialogsPropsType} from \"components/Dialogs/DialogsContainer\";\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\tconst {state} = props\r\n\r\n\treturn (\r\n\t\t<div className={s.dialogs}>\r\n\t\t\t<div className={s.dialogsItems}>\r\n\t\t\t\t{state.dialogs.map(el =>\r\n\t\t\t\t\t<div className={s.users} key={el.id}>\r\n\t\t\t\t\t\t<img src={el.avatar} alt=\"user\"/>\r\n\t\t\t\t\t\t<DialogItem name={el.name} id={el.id}/>\r\n\t\t\t\t\t</div>)}\r\n\t\t\t</div>\r\n\t\t\t<div className={s.messagesAndInput}>\r\n\t\t\t\t<div className={s.message}>\r\n\t\t\t\t\t{state.messages.map(el =>\r\n\t\t\t\t\t\t<MessageItem\r\n\t\t\t\t\t\t\tkey={el.id}\r\n\t\t\t\t\t\t\tmessage={el.message}\r\n\t\t\t\t\t\t\tid={el.id}\r\n\t\t\t\t\t\t\tsender={el.sender}\r\n\t\t\t\t\t\t/>)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<MessageInput\r\n\t\t\t\t\taddMessage={props.addMessage}\r\n\t\t\t\t\tstate={state}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React, {ComponentType} from \"react\";\r\nimport {ReducerPropsType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype mapStateToPropsForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: ReducerPropsType): mapStateToPropsForRedirect => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStateToPropsForRedirect) => {\r\n    let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n        return  <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\nimport {ReducerPropsType} from \"redux/redux-store\";\r\nimport {Dialogs} from \"components/Dialogs/Dialogs/Dialogs\";\r\nimport {MessagesType, sendMessageAC} from \"redux/messages-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from 'redux'\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    state: MessagesType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\ntype CommonPropsType = RouteComponentProps & DialogsPropsType\r\n\r\nclass DialogsContainer extends React.Component<CommonPropsType, {}> {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n                <div>\r\n                    <Dialogs {...this.props}/>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerPropsType): MapStateToPropsType => {\r\n    return {\r\n        state: state.messagesPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addMessage: (newMessage: string) => {\r\n           dispatch(sendMessageAC(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(DialogsContainer)","import s from './FormControls.module.css'\r\nimport React from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    input: {}\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    children: JSX.Element\r\n}\r\n\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: TextareaPropsType) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div className={s.errorSpan}>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n            <div>\r\n                {children}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__NSDV3\",\"error\":\"FormControls_error__eWZI7\",\"formSummaryError\":\"FormControls_formSummaryError__zQsfM\",\"errorSpan\":\"FormControls_errorSpan__b6o4K\"};"],"names":["DialogItem","props","name","path","id","className","s","to","MessageItem","message","sender","maxLength300","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","MessageInput","values","addMessage","Dialogs","state","dialogs","map","el","src","avatar","alt","messages","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","this","React","compose","connect","messagesPage","dispatch","newMessage","sendMessageAC","withRouter","Component","restProps","FormControl","meta","touched","error","children","hasError","input","Input","value","maxLength","length"],"sourceRoot":""}