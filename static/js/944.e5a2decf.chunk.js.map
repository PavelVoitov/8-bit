{"version":3,"file":"static/js/944.e5a2decf.chunk.js","mappings":"gQAqBaA,EAAwG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAEjI,OACI,kBAAMC,SAAUF,EAAhB,WACI,0BACI,SAAC,IAAD,CAAOG,YAAa,QACbC,UAAWC,EAAAA,EACXC,KAAM,QACNC,SAAU,CAACC,EAAAA,QAGtB,0BACI,SAAC,IAAD,CAAOC,KAAK,WACLN,YAAa,WACbC,UAAWC,EAAAA,EACXC,KAAM,WACNC,SAAU,CAACC,EAAAA,QAGtB,4BACI,SAAC,IAAD,CAAOC,KAAK,WACLL,UAAWC,EAAAA,EACXC,KAAM,aACNC,SAAU,CAACC,EAAAA,KAJtB,kBAOCP,IACG,gBAAKS,UAAWC,EAAAA,EAAAA,iBAAhB,SACKV,KAET,0BACI,4CAMVW,GAAiBC,EAAAA,EAAAA,GAAgD,CAACC,KAAM,SAAvDD,CAAiEd,GAmCxF,WAAegB,EAAAA,EAAAA,KAPS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAKa,CAACE,MAAAA,EAAAA,IAAzC,EA5Bc,SAACC,GAMX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAGrB,4BACI,mCACA,SAACT,EAAD,CAAgBV,SAVP,SAACoB,GACdF,EAAMD,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,sKCxD1DC,EAAc,SAAC,GAA2D,IAAD,IAAzDC,KAAOC,EAAkD,EAAlDA,QAAS3B,EAAyC,EAAzCA,MAAQ4B,EAAiC,EAAjCA,SACpCC,EAAWF,GAAW3B,EAE5B,OACI,iBAAKS,UAAWC,EAAAA,EAAAA,YAAgB,KAAOmB,EAAWnB,EAAAA,EAAAA,MAAU,IAA5D,WACI,yBACKkB,IAEJC,IAAY,0BAAO7B,QAKnB8B,EAAW,SAACX,GACrB,IAAOY,EAA6BZ,EAA7BY,MAAgBC,GAAab,EAAtBO,MAAd,OAAoCP,EAApC,IACA,OACI,SAACM,GAAD,kBAAiBN,GAAjB,cAAwB,uCAAcY,GAAWC,QAK5C5B,EAAQ,SAACe,GAClB,IAAOY,EAA6BZ,EAA7BY,MAAgBC,GAAab,EAAtBO,MAAd,OAAoCP,EAApC,IACA,OACI,SAACM,GAAD,kBAAiBN,GAAjB,cAAwB,oCAAWY,GAAWC,S,4ECpC/C,IAAMzB,EAAW,SAAC0B,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAkB,SAACC,GAAD,OAAuB,SAACF,GACnD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kBCL3C,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB","sources":["components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReducerPropsType} from \"../../redux/redux-store\";\r\nimport s from '../common/FormsControls/FormControls.module.css'\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type  LoginDataFormPropsType = {\r\n    onSubmit: (values: FormDataType) => void\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, LoginDataFormPropsType> & LoginDataFormPropsType> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Email'}\r\n                       component={Input}\r\n                       name={'email'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type=\"password\"\r\n                       placeholder={'Password'}\r\n                       component={Input}\r\n                       name={'password'}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\"\r\n                       component={Input}\r\n                       name={'rememberMe'}\r\n                       validate={[required]}\r\n                /> remember me\r\n            </div>\r\n            {error &&\r\n                <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginDataFormPropsType>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType & MapStateToProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerPropsType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import s from './FormControls.module.css'\r\nimport React from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    input: {}\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    children: JSX.Element\r\n}\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: TextareaPropsType) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__NSDV3\",\"error\":\"FormControls_error__eWZI7\",\"formSummaryError\":\"FormControls_formSummaryError__zQsfM\"};"],"names":["LoginForm","handleSubmit","error","onSubmit","placeholder","component","Input","name","validate","required","type","className","s","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","props","to","formData","email","password","rememberMe","FormControl","meta","touched","children","hasError","Textarea","input","restProps","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}