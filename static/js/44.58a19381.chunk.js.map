{"version":3,"file":"static/js/44.58a19381.chunk.js","mappings":"oRACA,EAA4B,yBAA5B,EAAqE,6BAArE,EAA2G,sBAA3G,EAA8I,0BAA9I,EAAgL,qB,SCuBnKA,EACgB,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACnD,OACC,kBAAMC,SAAUH,EAAhB,WACC,0BACC,SAACI,EAAA,EAAD,CAAOC,YAAa,QAChBC,UAAWC,EAAAA,EACXC,KAAM,QACNC,SAAU,CAACC,EAAAA,QAGhB,0BACC,SAACN,EAAA,EAAD,CAAOO,KAAK,WACRN,YAAa,WACbC,UAAWC,EAAAA,EACXC,KAAM,WACNC,SAAU,CAACC,EAAAA,QAGhB,iBAAKE,UAAWC,EAAhB,WACC,SAACT,EAAA,EAAD,CAAOO,KAAK,WACRL,UAAWC,EAAAA,EACXC,KAAM,gBAEV,gBAAKI,UAAWC,EAAhB,4BAEAX,IAAc,gBAAKY,IAAKZ,EAAYa,IAAI,YACxCb,IAAc,SAACE,EAAA,EAAD,CAAOC,YAAa,qBACVC,UAAWC,EAAAA,EACXC,KAAM,UACNC,SAAU,CAACC,EAAAA,MAEpC,gBAAKE,UAAWC,EAAhB,UACC,yCAED,gBAAKD,UAAWC,EAAhB,SACEZ,IACO,gBAAKW,UAAWI,EAAAA,EAAAA,iBAAhB,SACJf,UAOFgB,GAAiBC,EAAAA,EAAAA,GAAgD,CAACC,KAAM,SAAvDD,CAAiEnB,GAqCxF,GAAeqB,EAAAA,EAAAA,KARS,SAACC,GACxB,MAAO,CACNC,OAAQD,EAAME,KAAKD,OACnBpB,WAAYmB,EAAME,KAAKrB,cAKe,CAACsB,MAAAA,EAAAA,IAAzC,EA9Bc,SAACC,GAMd,OAAIA,EAAMH,QACF,SAAC,KAAD,CAAUI,GAAI,cAGrB,iBAAKd,UAAWC,EAAhB,WACC,mCACA,SAACI,EAAD,CAAgBd,SAVD,SAACwB,GACjBF,EAAMD,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UASxC7B,WAAYuB,EAAMvB,oB,sKC3EnD8B,EAAc,SAAC,GAA2D,IAAD,IAAzDC,KAAOC,EAAkD,EAAlDA,QAASjC,EAAyC,EAAzCA,MAAQkC,EAAiC,EAAjCA,SACpCC,EAAWF,GAAWjC,EAE5B,OACI,iBAAKW,UAAWI,EAAAA,EAAAA,YAAgB,KAAOoB,EAAWpB,EAAAA,EAAAA,MAAU,IAA5D,WACI,gBAAKJ,UAAWI,EAAAA,EAAAA,UAAhB,SACKoB,IAAY,0BAAOnC,OAExB,yBACKkC,QAOJE,EAAW,SAACZ,GACrB,IAAOa,EAA6Bb,EAA7Ba,MAAgBC,GAAad,EAAtBQ,MAAd,OAAoCR,EAApC,IACA,OACI,SAACO,GAAD,kBAAiBP,GAAjB,cAAwB,uCAAca,GAAWC,QAK5ChC,EAAQ,SAACkB,GAClB,IAAOa,EAA6Bb,EAA7Ba,MAAgBC,GAAad,EAAtBQ,MAAd,OAAoCR,EAApC,IACA,OACI,SAACO,GAAD,kBAAiBP,GAAjB,cAAwB,oCAAWa,GAAWC,S,4ECxC/C,IAAM7B,EAAW,SAAC8B,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAkB,SAACC,GAAD,OAAuB,SAACF,GACnD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,kBCL3C,KAAgB,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,uCAAuC,UAAY","sources":["webpack://samurai-way/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"Login_loginForm__d-id0\",\"checkboxField\":\"Login_checkboxField__lg+C4\",\"button\":\"Login_button__k081g\",\"rememberMe\":\"Login_rememberMe__W+eZv\",\"error\":\"Login_error__xTyk9\"};","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"utils/validators/validators\";\r\nimport {login} from \"redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReducerPropsType} from \"redux/redux-store\";\r\nimport s from '../common/FormsControls/FormControls.module.css'\r\nimport style from './Login.module.css'\r\n\r\n\r\nexport type FormDataType = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: boolean\r\n\tcaptcha: string\r\n}\r\n\r\nexport type  LoginDataFormPropsType = {\r\n\tonSubmit: (values: FormDataType) => void\r\n\tcaptchaUrl: string | null\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType, LoginDataFormPropsType>\r\n\t& LoginDataFormPropsType> = ({handleSubmit, error, captchaUrl}) => {\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<Field placeholder={'Email'}\r\n\t\t\t\t\t\t\t component={Input}\r\n\t\t\t\t\t\t\t name={'email'}\r\n\t\t\t\t\t\t\t validate={[required]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Field type=\"password\"\r\n\t\t\t\t\t\t\t placeholder={'Password'}\r\n\t\t\t\t\t\t\t component={Input}\r\n\t\t\t\t\t\t\t name={'password'}\r\n\t\t\t\t\t\t\t validate={[required]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.checkboxField}>\r\n\t\t\t\t<Field type=\"checkbox\"\r\n\t\t\t\t\t\t\t component={Input}\r\n\t\t\t\t\t\t\t name={'rememberMe'}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className={style.rememberMe}>remember me</div>\r\n\t\t\t</div>\r\n\t\t\t{captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n\t\t\t{captchaUrl && <Field placeholder={'Symbols from image'}\r\n                            component={Input}\r\n                            name={'captcha'}\r\n                            validate={[required]}\r\n      />}\r\n\t\t\t<div className={style.button}>\r\n\t\t\t\t<button>Login</button>\r\n\t\t\t</div>\r\n\t\t\t<div className={style.error}>\r\n\t\t\t\t{error &&\r\n            <div className={s.formSummaryError}>\r\n\t\t\t\t\t\t\t{error}\r\n            </div>}\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginDataFormPropsType>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype LoginPropsType = {\r\n\tlogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst Login = (props: LoginPropsType & MapStateToProps) => {\r\n\r\n\tconst onSubmit = (formData: FormDataType) => {\r\n\t\tprops.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n\t}\r\n\r\n\tif (props.isAuth) {\r\n\t\treturn <Redirect to={'/profile'}/>\r\n\t}\r\n\treturn (\r\n\t\t<div className={style.loginForm}>\r\n\t\t\t<h1>LOGIN</h1>\r\n\t\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\ntype MapStateToProps = {\r\n\tisAuth: boolean\r\n\tcaptchaUrl: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerPropsType): MapStateToProps => {\r\n\treturn {\r\n\t\tisAuth: state.auth.isAuth,\r\n\t\tcaptchaUrl: state.auth.captchaUrl\r\n\t}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import s from './FormControls.module.css'\r\nimport React from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    input: {}\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    children: JSX.Element\r\n}\r\n\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: TextareaPropsType) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div className={s.errorSpan}>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n            <div>\r\n                {children}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__NSDV3\",\"error\":\"FormControls_error__eWZI7\",\"formSummaryError\":\"FormControls_formSummaryError__zQsfM\",\"errorSpan\":\"FormControls_errorSpan__b6o4K\"};"],"names":["LoginForm","handleSubmit","error","captchaUrl","onSubmit","Field","placeholder","component","Input","name","validate","required","type","className","style","src","alt","s","LoginReduxForm","reduxForm","form","connect","state","isAuth","auth","login","props","to","formData","email","password","rememberMe","captcha","FormControl","meta","touched","children","hasError","Textarea","input","restProps","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}