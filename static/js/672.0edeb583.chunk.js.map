{"version":3,"file":"static/js/672.0edeb583.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/profileStatus/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__YGZb+\",\"fon\":\"ProfileInfo_fon__rPrbu\",\"avatar\":\"ProfileInfo_avatar__7Rxtf\"};","import {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n        }\r\n\r\n   const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n       if (e.key === 'Enter') {\r\n           setEditMode(false)\r\n           props.updateStatus(status)\r\n       }\r\n   }\r\n\r\n    return (\r\n        <>\r\n            {!editMode && <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n            </div>\r\n            }\r\n            {editMode && <div>\r\n                <input\r\n                    onKeyDown={handleKeyDown}\r\n                    autoFocus={true} onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange} value={status}></input>\r\n            </div>\r\n            }\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n","import React from \"react\";\r\nimport c from './ProfileInfo.module.css';\r\nimport {ProfilePropsType} from \"../../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./profileStatus/ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoProps = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus}: ProfileInfoProps) => {\r\n    if (profile === null) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={c.description}>\r\n                <img className={c.avatar} src={profile.photos.large} alt=\"avatar\"/>\r\n                <p>{profile.fullName}</p>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <h2>Contacts:</h2>\r\n                <ul>\r\n                    <li>{profile.contacts.vk}</li>\r\n                    <li>{profile.contacts.facebook}</li>\r\n                    <li>{profile.contacts.twitter}</li>\r\n                    <li>{profile.contacts.instagram}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__OcqCW\",\"posts\":\"MyPosts_posts__mwbYL\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__aDN5L\"};","import React from \"react\";\r\nimport c from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport class Post extends React.Component<PostPropsType> {\r\n    render() {\r\n        return (\r\n            <div className={c.item}>\r\n                <div>\r\n                    <img\r\n                        src=\"https://ih1.redbubble.net/image.455464050.9428/flat,750x,075,f-pad,750x1000,f8f8f8.u10.jpg\"\r\n                        alt=\"user\"/>\r\n                    {this.props.message}\r\n                </div>\r\n                <div>\r\n                    <span>{this.props.likesCount} like</span>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type FormPostDataType = {\r\n    post: string\r\n}\r\n\r\ninterface AddPostFormType {\r\n    onSubmit: (values: FormPostDataType) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormPostDataType, AddPostFormType> & AddPostFormType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    placeholder={'Enter your post...'}\r\n                    name={'post'}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormPostDataType, AddPostFormType>({form: 'postAddPostForm'})(AddPostForm)","import React, {memo} from \"react\";\r\nimport c from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {AddPostReduxForm, FormPostDataType} from \"./Post/AddPostForm\";\r\n\r\n\r\ntype MyPostsProps = {\r\n    post: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = memo((props: MyPostsProps) => {\r\n    const {post, addPost} = props\r\n\r\n    const onAddPost = (values: FormPostDataType) => {\r\n        addPost(values.post)\r\n    }\r\n\r\n    return (\r\n        <div className={c.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={c.posts}>\r\n                {post.map(el =>\r\n                    <Post key={el.id} message={el.message} likesCount={el.likesCount}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ReducerPropsType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\ntype MapStateToPropsType = {\r\n    post: Array<PostType>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsContainer = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: ReducerPropsType): MapStateToPropsType => {\r\n    return {\r\n        post: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfileType = {\r\n    profile: ProfilePropsType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const Profile = (props: ProfileType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfilePropsType, setUserProfile, updateStatus} from \"redux/profile-reducer\";\r\n\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ReducerPropsType} from \"redux/redux-store\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n\tprofile: ProfilePropsType\r\n\tstatus: string\r\n\tauthorizedUserId: string\r\n\tisAuth: boolean\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStateToPropsType & {\r\n\tsetUserProfile: (profile: ProfilePropsType) => void\r\n\tgetUserProfile: (userId: string) => void\r\n\tgetStatus: (status: string) => void\r\n\tupdateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsProps = {\r\n\tuserId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsProps> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType, {}> {\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet userId = this.props.match.params.userId\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId\r\n\t\t\tif (!userId) {\r\n\t\t\t\tthis.props.history.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.props.getUserProfile(userId)\r\n\t\tthis.props.getStatus(userId)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Profile {...this.props}\r\n\t\t\t\t\t\t\t\t\t profile={this.props.profile}\r\n\t\t\t\t\t\t\t\t\t status={this.props.status}\r\n\t\t\t\t\t\t\t\t\t updateStatus={this.props.updateStatus}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: ReducerPropsType) => {\r\n\treturn {\r\n\t\tprofile: state.profilePage.profile,\r\n\t\tstatus: state.profilePage.status,\r\n\t\tauthorizedUserId: state.auth.id,\r\n\t\tisAuth: state.auth.isAuth\r\n\t}\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n\t\t{\r\n\t\t\tsetUserProfile,\r\n\t\t\tgetUserProfile,\r\n\t\t\tgetStatus,\r\n\t\t\tupdateStatus,\r\n\t\t}),\r\n\twithRouter,\r\n)(ProfileContainer)","import s from './FormControls.module.css'\r\nimport React from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    input: {}\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    children: JSX.Element\r\n}\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: TextareaPropsType) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__NSDV3\",\"error\":\"FormControls_error__eWZI7\",\"formSummaryError\":\"FormControls_formSummaryError__zQsfM\"};"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onKeyDown","e","key","updateStatus","autoFocus","onBlur","onChange","currentTarget","value","ProfileInfo","profile","Preloader","className","c","src","photos","large","alt","fullName","contacts","vk","facebook","twitter","instagram","Post","this","message","likesCount","React","maxLength100","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","name","validate","required","MyPosts","memo","post","addPost","values","map","el","id","MyPostsContainer","connect","state","profilePage","posts","dispatch","newPostText","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","setUserProfile","withRouter","FormControl","meta","touched","error","children","hasError","s","input","restProps","Input","maxLength","length"],"sourceRoot":""}