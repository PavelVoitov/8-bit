{"version":3,"file":"static/js/107.68f48442.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css?a7c9","components/Profile/MyPosts/ProfileInfo/Contact/Contact.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/ProfileInfo/ProfileStatus/ProfileSatusWithHooks.module.css?b883","components/Profile/MyPosts/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileInfo_description__YGZb+\",\"fon\":\"ProfileInfo_fon__rPrbu\",\"avatar\":\"ProfileInfo_avatar__7Rxtf\"};","import React from \"react\";\r\n\r\ntype ContactPropsType = {\r\n\tcontactTitle: string\r\n\tcontactValue: string\r\n}\r\n\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div><b>{contactTitle}:</b> {contactValue}</div>\r\n\t\t</div>\r\n\t)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"statusBlock\":\"ProfileSatusWithHooks_statusBlock__k6yW5\",\"status\":\"ProfileSatusWithHooks_status__BUI+c\"};","import {ChangeEvent, KeyboardEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileSatusWithHooks.module.css'\r\nimport editIcon from 'assets/images/edit-icon.png'\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\tconst [editMode, setEditMode] = useState<boolean>(false)\r\n\tconst [status, setStatus] = useState<string>(props.status)\r\n\r\n\tuseEffect(() => {\r\n\t\tsetStatus(props.status)\r\n\t}, [props.status])\r\n\r\n\r\n\tconst activateEditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t}\r\n\r\n\tconst deactivateEditMode = () => {\r\n\t\tsetEditMode(false)\r\n\t\tprops.updateStatus(status)\r\n\t}\r\n\r\n\tconst onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetStatus(e.currentTarget.value)\r\n\t}\r\n\r\n\tconst handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n\t\tif (e.key === 'Enter') {\r\n\t\t\tsetEditMode(false)\r\n\t\t\tprops.updateStatus(status)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{!editMode && <div className={s.statusBlock}>\r\n          <span className={s.status} onDoubleClick={activateEditMode}>{props.status || '-----'}</span>\r\n          <img src={editIcon} alt=\"edit icon\" onDoubleClick={activateEditMode}/>\r\n      </div>\r\n\t\t\t}\r\n\t\t\t{editMode && <div className={s.statusBlock}>\r\n          <input\r\n              onKeyDown={handleKeyDown}\r\n              autoFocus={true}\r\n              onBlur={deactivateEditMode}\r\n              onChange={onStatusChange}\r\n              value={status}></input>\r\n      </div>\r\n\t\t\t}\r\n\t\t</>\r\n\r\n\t);\r\n}\r\n\r\n","import {ProfileStatusWithHooks} from \"components/Profile/MyPosts/ProfileInfo/ProfileStatus/ProfileStatusWithHooks\";\r\nimport React from \"react\";\r\nimport {ProfilePropsType} from \"redux/profile-reducer\";\r\n\r\ntype Props = {\r\n\tcontactsObj:  JSX.Element[]\r\n\tprofile: ProfilePropsType\r\n\tupdateStatus: (status: string) => void\r\n\tstatus: string\r\n\tisOwner: boolean\r\n\tgoToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = ({contactsObj, profile, updateStatus, status, isOwner, goToEditMode}: Props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{isOwner ? <div><button onClick={goToEditMode}>edit</button></div> : ''}\r\n\t\t\t<h2>{profile.fullName}</h2>\r\n\t\t\t<ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\t\t\t<div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n\t\t\t\t</div>\r\n\t\t\t\t{profile.lookingForAJob ? <div>\r\n\t\t\t\t\t<b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n\t\t\t\t</div> : ''\r\n\t\t\t\t}\r\n\t\t\t\t{profile.aboutMe ? <div>\r\n\t\t\t\t\t<b>About me:</b> {profile.aboutMe}\r\n\t\t\t\t</div> : ''}\r\n\t\t\t\t<h3>Contacts:</h3>\r\n\t\t\t\t{contactsObj}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport {Input, Textarea} from \"components/common/FormsControls/FormsControls\";\r\nimport {required} from \"utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfilePropsType} from \"redux/profile-reducer\";\r\nimport s from \"components/common/FormsControls/FormControls.module.css\";\r\n\r\n\r\nexport type DataFromFormDataType = {\r\n\tfullName: string\r\n\tlookingForAJob: boolean\r\n\tlookingForAJobDescription: string\r\n\taboutMe: string\r\n\tgithub: string\r\n\tvk: string\r\n\tfacebook: string\r\n\tinstagram: string\r\n\ttwitter: string\r\n\twebsite: string\r\n\tyoutube: string\r\n\tmainLink: string\r\n}\r\n\r\ntype ProfileDataFormType = {\r\n\tonSubmit: (formData: DataFromFormDataType) => void\r\n\tprofile: ProfilePropsType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<DataFromFormDataType, ProfileDataFormType>\r\n\t& ProfileDataFormType> = (\r\n\t{\r\n\t\thandleSubmit,\r\n\t\terror,\r\n\t\tprofile\r\n\t}) => {\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<div style={{marginBottom: 20, width: 250}}>\r\n\t\t\t\t<button>save</button>\r\n\t\t\t\t{error &&\r\n            <div className={s.formSummaryError}>\r\n\t\t\t\t\t\t\t{error}\r\n            </div>}\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<b>Full name:</b>\r\n\t\t\t\t<Field placeholder={'Full name'}\r\n\t\t\t\t\t\t\t component={Input}\r\n\t\t\t\t\t\t\t name={'fullName'}\r\n\t\t\t\t\t\t\t validate={[required]}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div style={{display: \"flex\", marginBottom: 20}}>\r\n\t\t\t\t\t<b>Looking for a job:</b>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tplaceholder={'Looking for a job'}\r\n\t\t\t\t\t\tcomponent={Input}\r\n\t\t\t\t\t\tname={'lookingForAJob'}\r\n\t\t\t\t\t\tstyle={{width: 30}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>My professional skills:</b>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tplaceholder={'My professional skills'}\r\n\t\t\t\t\t\tcomponent={Textarea}\r\n\t\t\t\t\t\tname={'lookingForAJobDescription'}\r\n\t\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<b>About me:</b>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tplaceholder={'About Me'}\r\n\t\t\t\t\t\tcomponent={Textarea}\r\n\t\t\t\t\t\tname={'aboutMe'}\r\n\t\t\t\t\t\tvalidate={[required]}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3>Contacts:</h3>\r\n\t\t\t\t{Object.keys(profile.contacts).map(key => {\r\n\t\t\t\treturn <div key={key}>\r\n\t\t\t\t\t<b>{key}:</b>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tplaceholder={key}\r\n\t\t\t\t\t\tcomponent={Input}\r\n\t\t\t\t\t\tname={'contacts.' + key}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport const ProfileDataReduxForm = reduxForm<DataFromFormDataType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useLayoutEffect, useState} from \"react\";\r\nimport c from './ProfileInfo.module.css';\r\nimport {ContactsType, ProfilePropsType, setEditModeSuccess} from \"redux/profile-reducer\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../../assets/images/photosNull.png\";\r\nimport {Contact} from \"components/Profile/MyPosts/ProfileInfo/Contact/Contact\";\r\nimport {ProfileData} from \"components/Profile/MyPosts/ProfileInfo/ProfileData/ProfileData\";\r\nimport {\r\n\tDataFromFormDataType,\r\n\tProfileDataReduxForm\r\n} from \"components/Profile/MyPosts/ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype ProfileInfoProps = {\r\n\tprofile: ProfilePropsType\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n\tisOwner: boolean\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (formData: DataFromFormDataType) => void\r\n\tisEditMode: boolean\r\n}\r\n\r\n\r\nexport const ProfileInfo = ({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprofile,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstatus,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tupdateStatus,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisOwner,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsavePhoto,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsaveProfile,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisEditMode\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}: ProfileInfoProps) => {\r\n\tconst [editMode, setEditMode] = useState<boolean>(false)\r\n\tconst dispatch = useDispatch()\r\n\r\n\tuseLayoutEffect( () => {\r\n\t\tisEditMode ? setEditMode(true) : setEditMode(false)\r\n\t}, [isEditMode])\r\n\r\n\tif (profile === null) {\r\n\t\treturn <Preloader/>\r\n\t}\r\n\r\n\tconst onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files) {\r\n\t\t\tsavePhoto(e.target.files[0])\r\n\t\t}\r\n\t}\r\n\r\n\tconst contacts: ContactsType = profile.contacts\r\n\tconst contactsObj = Object.keys(contacts).map(key => {\r\n\t\treturn <Contact key={key} contactTitle={key} contactValue={contacts[key as keyof ContactsType]}/>\r\n\t})\r\n\r\n\tconst onSubmit = async (formData: DataFromFormDataType) => {\r\n\t\t saveProfile(formData)\r\n\t}\r\n\r\n\tconst goToEditMode = () => {\r\n\t\tsetEditMode(true)\r\n\t\tdispatch(setEditModeSuccess(true))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className={c.description}>\r\n\t\t\t\t<img className={c.avatar} src={profile.photos?.large || userPhoto} alt={'your avatar'}/>\r\n\t\t\t\t{isOwner ? <input type=\"file\" onChange={onMainPhotoSelected}/> : ''}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{editMode\r\n\t\t\t\t\t\t? <ProfileDataReduxForm\r\n\t\t\t\t\t\t\tonSubmit={onSubmit}\r\n\t\t\t\t\t\t\tinitialValues={profile}\r\n\t\t\t\t\t\t\tprofile={profile}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t: <ProfileData\r\n\t\t\t\t\t\t\tcontactsObj={contactsObj}\r\n\t\t\t\t\t\t\tprofile={profile}\r\n\t\t\t\t\t\t\tupdateStatus={updateStatus}\r\n\t\t\t\t\t\t\tstatus={status}\r\n\t\t\t\t\t\t\tisOwner={true}\r\n\t\t\t\t\t\t\tgoToEditMode={goToEditMode}\r\n\t\t\t\t\t\t/>}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__OcqCW\",\"posts\":\"MyPosts_posts__mwbYL\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__aDN5L\"};","import React from \"react\";\r\nimport c from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport class Post extends React.Component<PostPropsType> {\r\n    render() {\r\n        return (\r\n            <div className={c.item}>\r\n                <div>\r\n                    <img\r\n                        src=\"https://ih1.redbubble.net/image.455464050.9428/flat,750x,075,f-pad,750x1000,f8f8f8.u10.jpg\"\r\n                        alt=\"user\"/>\r\n                    {this.props.message}\r\n                </div>\r\n                <div>\r\n                    <span>{this.props.likesCount} like</span>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\nexport type FormPostDataType = {\r\n    post: string\r\n}\r\n\r\ninterface AddPostFormType {\r\n    onSubmit: (values: FormPostDataType) => void\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<FormPostDataType, AddPostFormType> & AddPostFormType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    placeholder={'Enter your post...'}\r\n                    name={'post'}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormPostDataType, AddPostFormType>({form: 'postAddPostForm'})(AddPostForm)","import React, {memo} from \"react\";\r\nimport c from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {AddPostReduxForm, FormPostDataType} from \"./Post/AddPostForm\";\r\n\r\n\r\ntype MyPostsProps = {\r\n    post: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nexport const MyPosts = memo((props: MyPostsProps) => {\r\n    const {post, addPost} = props\r\n\r\n    const onAddPost = (values: FormPostDataType) => {\r\n        addPost(values.post)\r\n    }\r\n\r\n    return (\r\n        <div className={c.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={c.posts}>\r\n                {post.map(el =>\r\n                    <Post key={el.id} message={el.message} likesCount={el.likesCount}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ReducerPropsType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {MyPosts} from \"./MyPosts\";\r\n\r\ntype MapStateToPropsType = {\r\n    post: Array<PostType>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsContainer = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: ReducerPropsType): MapStateToPropsType => {\r\n    return {\r\n        post: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePropsType} from \"redux/profile-reducer\";\r\nimport {DataFromFormDataType} from \"components/Profile/MyPosts/ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileType = {\r\n\tprofile: ProfilePropsType\r\n\tstatus: string\r\n\tupdateStatus: (status: string) => void\r\n\tsavePhoto: (file: File) => void\r\n\tisOwner: boolean\r\n\tsaveProfile: (formData: DataFromFormDataType) => void\r\n\tisEditMode: boolean\r\n}\r\n\r\n\r\nexport const Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile, isEditMode}: ProfileType) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ProfileInfo\r\n\t\t\t\tprofile={profile}\r\n\t\t\t\tstatus={status}\r\n\t\t\t\tupdateStatus={updateStatus}\r\n\t\t\t\tisOwner={isOwner}\r\n\t\t\t\tsavePhoto={savePhoto}\r\n\t\t\t\tsaveProfile={saveProfile}\r\n\t\t\t\tisEditMode={isEditMode}\r\n\t\t\t/>\r\n\t\t\t<MyPostsContainer/>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n\tgetStatus,\r\n\tgetUserProfile,\r\n\tProfilePropsType,\r\n\tsavePhoto, saveProfile,\r\n\tsetUserProfile,\r\n\tupdateStatus\r\n} from \"redux/profile-reducer\";\r\n\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ReducerPropsType} from \"redux/redux-store\";\r\nimport {DataFromFormDataType} from \"components/Profile/MyPosts/ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n\tprofile: ProfilePropsType\r\n\tstatus: string\r\n\tauthorizedUserId: string\r\n\tisAuth: boolean\r\n\tisEditMode: boolean\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStateToPropsType & {\r\n\tsetUserProfile: (profile: ProfilePropsType) => void\r\n\tgetUserProfile: (userId: string) => void\r\n\tgetStatus: (status: string) => void\r\n\tupdateStatus: (status: string) => void\r\n\tsavePhoto: (file: File) => void\r\n\tsaveProfile: (formData: DataFromFormDataType) => void\r\n}\r\n\r\ntype PathParamsProps = {\r\n\tuserId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsProps> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType, {}> {\r\n\r\n\trefreshProfile() {\r\n\t\tlet userId = this.props.match.params.userId\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId\r\n\t\t\tif (!userId) {\r\n\t\t\t\tthis.props.history.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.props.getUserProfile(userId)\r\n\t\tthis.props.getStatus(userId)\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t\tthis.refreshProfile()\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n\t\tif (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n\t\t\tthis.refreshProfile()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Profile {...this.props}\r\n\t\t\t\t\t\t\t\t\t isOwner={!this.props.match.params.userId}\r\n\t\t\t\t\t\t\t\t\t profile={this.props.profile}\r\n\t\t\t\t\t\t\t\t\t status={this.props.status}\r\n\t\t\t\t\t\t\t\t\t updateStatus={this.props.updateStatus}\r\n\t\t\t\t\t\t\t\t\t savePhoto={this.props.savePhoto}\r\n\t\t\t\t\t\t\t\t\t saveProfile={this.props.saveProfile}\r\n\t\t\t\t\t\t\t\t\t isEditMode={this.props.isEditMode}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: ReducerPropsType) => {\r\n\treturn {\r\n\t\tprofile: state.profilePage.profile,\r\n\t\tstatus: state.profilePage.status,\r\n\t\tauthorizedUserId: state.auth.id,\r\n\t\tisAuth: state.auth.isAuth,\r\n\t\tisEditMode: state.profilePage.isEditMode\r\n\t}\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps,\r\n\t\t{\r\n\t\t\tsetUserProfile,\r\n\t\t\tgetUserProfile,\r\n\t\t\tgetStatus,\r\n\t\t\tupdateStatus,\r\n\t\t\tsavePhoto,\r\n\t\t\tsaveProfile\r\n\t\t}),\r\n\twithRouter,\r\n)(ProfileContainer)","import s from './FormControls.module.css'\r\nimport React from \"react\";\r\n\r\ntype TextareaPropsType = {\r\n    input: {}\r\n    meta: {\r\n        error: string\r\n        touched: boolean\r\n    }\r\n    children: JSX.Element\r\n}\r\n\r\n\r\nconst FormControl = ({meta: {touched, error}, children}: TextareaPropsType) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div className={s.errorSpan}>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n            <div>\r\n                {children}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n\r\n}\r\n\r\nexport const Input = (props: TextareaPropsType) => {\r\n    const {input, meta, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator= (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__NSDV3\",\"error\":\"FormControls_error__eWZI7\",\"formSummaryError\":\"FormControls_formSummaryError__zQsfM\",\"errorSpan\":\"FormControls_errorSpan__b6o4K\"};"],"names":["Contact","contactTitle","contactValue","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","activateEditMode","className","s","onDoubleClick","src","editIcon","alt","onKeyDown","e","key","updateStatus","autoFocus","onBlur","onChange","currentTarget","value","ProfileData","contactsObj","profile","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","onSubmit","style","marginBottom","width","Field","placeholder","component","Input","name","validate","required","display","type","Textarea","Object","keys","contacts","map","ProfileInfo","savePhoto","saveProfile","isEditMode","dispatch","useDispatch","useLayoutEffect","Preloader","formData","c","photos","large","userPhoto","target","files","initialValues","setEditModeSuccess","Post","this","message","likesCount","React","maxLength100","maxLengthCreator","AddPostReduxForm","MyPosts","memo","post","addPost","values","el","id","MyPostsContainer","connect","state","profilePage","posts","newPostText","addPostAC","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","setUserProfile","withRouter","FormControl","meta","touched","children","hasError","input","restProps","maxLength","length"],"sourceRoot":""}